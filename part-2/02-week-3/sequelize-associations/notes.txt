Lesson Objective:

By the end of this lesson, you will be able to create and use Sequelize associations to link different database tables together in a Node.js application.

What are sequelize associations?
    - Sequelize associations are a way to define relationships between tables in a relational db.
    - Associations enable us t o create more complex database queries with fewer queries.
    - Since the tables will have relationships with each other from the associations, we can write fewer queries that can target multiple tables.
        - Helps us organize our data
        - Helps facilitate writing cleaner code due to writing less queries. -> efficient queries.

--------------------------------------------------------------------
Here are some examples for the different sequelize associations:

One-to-One (1:1) association: 

Model1.hasOne(Model2)
Model2.belongsTo(Model1)

- A person has one passport and a passport belongs to one person.

Person
+----+-------+---------------------+---------------------+
| id | name  | createdAt           | updatedAt           |
+----+-------+---------------------+---------------------+
| 1  | Alice | 2022-02-27 12:00:00 | 2022-02-27 12:00:00 |
| 2  | Bob   | 2022-02-27 12:00:00 | 2022-02-27 12:00:00 |
| 3  | Carol | 2022-02-27 12:00:00 | 2022-02-27 12:00:00 |
+----+-------+---------------------+---------------------+

Passport
+----+--------+---------+---------------------+---------------------+
| id | number | PersonId| createdAt           | updatedAt           |
+----+--------+---------+---------------------+---------------------+
| 1  | 12345  | 1       | 2022-02-27 12:00:00 | 2022-02-27 12:00:00 |
| 2  | 67890  | 2       | 2022-02-27 12:00:00 | 2022-02-27 12:00:00 |
| 3  | 24680  | 3       | 2022-02-27 12:00:00 | 2022-02-27 12:00:00 |
+----+--------+---------+---------------------+---------------------+


-----------------------------------------------------------------------------------------------------------------------------

One-to-Many (1:N) association:

Model1.hasMany(Model2)
Model2.belongsTo(Model1)

- A customer can have many orders, but an order can only belong to one customer.

+-----------+---------------+
|  Customer |               |
+-----------+---------------+
| id        | name          |
+-----------+---------------+
| 1         | John Smith    |
| 2         | Jane Doe      |
| 3         | Bob Johnson   |
+-----------+---------------+

+-------+---------------+-------------+
| Order |               |             |
+-------+---------------+-------------+
| id    | orderNumber   | CustomerId  |
+-------+---------------+-------------+
| 1     | 123           | 1           |
| 2     | 456           | 2           |
| 3     | 789           | 3           |
+-------+---------------+-------------+

-----------------------------------------------------------------------------------------------------------------------------

Many-to-Many (N:M) association:

- A student can take many courses, and a course can have many students.

+---------+---------------+
| Student |               |
+---------+---------------+
| id      | name          |
+---------+---------------+
| 1       | Alice         |
| 2       | Bob           |
| 3       | Charlie       |
+---------+---------------+

+--------+-----------------+
| Course |                 |
+--------+-----------------+
| id     | name            |
+--------+-----------------+
| 1      | Math            |
| 2      | Science         |
| 3      | English         |
+--------+-----------------+

//Through table: Enrollment
+------------+------------+---------+
| Enrollment |            |         |
+------------+------------+---------+
| id         | StudentId | CourseId|
+------------+------------+---------+
| 1          | 1          | 1        |
| 2          | 1          | 2        |
| 3          | 2          | 1        |
| 4          | 3          | 2        |
| 5          | 3          | 3        |
+------------+------------+---------+



-----------------------------------------------------------------------------------------------------------------------------

Pair Programming exercise

1. Pull down the repo and sync the database, observe the tables that are created -> walk through demo.js with the tables that are generated.
    - focus on the foriegn keys column that gets created after every association.


2.
- Create an association between the User and Pets table from yesterday's demo
- Reseed your data into the associated tables
- check either DB browser or your sqlite viewer to see your newly associated tables